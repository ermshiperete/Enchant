The following are notes on building enchant (1.6) and its dependencies using MSVC 2008 (by John Thomson).
Sorry they are rather rough, but it's the best I can do and should be of some help.

Enchant depends on glib. Based on Eric's comments I think it may be important to build glib using the same exact C runtime library,
though I have not confirmed this.

I started by downloading glib-2.26.1.tar.bz2 from http://www.gtk.org/download-windows.html and expand twice with stuffit (to d:\try2\glib).
Open D:\try2\glib\glib-2.26.1\build\win32\vs9\glib.sln in Visual Studio.

Be sure to follow the instructions in  glib-2.26.1\build\win32\vs9\README.txt, which describes how to set up the build and dependencies.

Even after doing that, this solution, as of 2.26.1, has some problems. The Windows build process does not know how to make some .h files
from .h.in ones. For example, glibconfig.h.win32.in needs to be copied to glibconfig.h.win32.

There is a bug in the prebuild event, at least for glib and I think also for some other modules. Change the lines for glibconfig.h to

if exist ..\..\..\glib\glibconfig.h goto DONE_GLIBCONFIG_H
copy ..\..\..\glib\glibconfig.h.win32 ..\..\..\glib\glibconfig.h

Now it at least tries to build the C++ files.

Still 12 build errors.
define G_OS_WIN32 as project pre-processor define fixes many.
modify gtimer.c not to include sys/time.h if G_OS_WIN32 is defined fixes another (and many warnings).

Now remaining problems are missing files in glib\pcre
Files 
'..\..\..\glib\pcre\pcre_version.c'
'..\..\..\glib\pcre\pcre_valid_utf8.c'
'..\..\..\glib\pcre\pcre_refcount.c
 '..\..\..\glib\pcre\pcre_maketables.c'
'..\..\..\glib\pcre\pcre_info.c'

Simply removing them from the project leads to a successful build as far as I can tell.
(I note that these files are not listed in the pcre Makefile.am; possibly they have been removed but the Windows build was not updated?)

Outputs are now in D:\try2\glib\glib-2.26.1\build\win32\vs9\Release\Win32\bin.

So much for glib. Now for building Enchant. Used TortoiseSvn to get source from http://svn.abisource.com/enchant/trunk to d:\Enchant.
The VS project in the repository when I started was for VS2005 (I think I used revision 29482).
I opened it and let it update to a VS 2008 project.

Copied all the .h files from D:\try2\glib\glib-2.26.1\glib to D:\Enchant\lib\glib\include\glib-2.0.
(It only obviously needs glib.h, but that includes all or most of the rest.)
Then had to move all but glib.h itself into a glib subdirectory.
glibconfig apparently needs to be back up in glib-2.0.

Copy gmodule.h from D:\try2\glib\glib-2.26.1\gmodule to D:\Enchant\lib\glib\include\glib-2.0

In project properties, defined ENCHANT_VERSION_STRING to be \"1.6\". (This is probably not the ideal way to handle this.)

Resource file libenchant.rc cannot be found anywhere. Tried removing it.
Now everything compiles (but doesn't link yet).
However, libenchant.rc produces the "details" that a DLL should have in its properties in Windows explorer.
Discovered it is supposed to be generateed from libenchant.rc.in. Generated one by hand making appropriate version number substitutions.
This seems to work.

Copy glib-2.0.lib (as glib-2.0-vs9.lib) and gmodule-2.0.lib (as gmodule-2.0-vs9.lib) from D:\try2\glib\glib-2.26.1\build\win32\vs9\Release\Win32\bin to D:\Enchant\lib\glib\release.
Change Include files to use vs9 rather than vs8.

At this point, we seem to have a good build of libenchant.dll.

However the broker was still not able to make a dictionary based on the myspell stuff. Seems we need to build a compatible myspell backend.
Did that with minor fixes to project #defines and manually added .rc to give version number.

Getting unit tests working
- Downloaded unittest-cpp-1.4.zip from http://sourceforge.net/projects/unittest-cpp/files/UnitTest%2B%2B/1.4/unittest-cpp-1.4.zip/download. Unzip to D:\Enchant\lib.
- Change lib file in two projects from vs8 to vs9
- in EnchantBrokerTestFixture.h, add
#define testResults_ (*(UnitTest::CurrentTest::Results())) ...that doesn't seem right, most of the tests using that fail. But it got it to compile and let me run the others.
Got the required  UnitTest++.vsnet2005.lib... by building the unitTest++ solution.

At this point I could run some unit tests. I didn't get them working all the way.

Gotcha: if you run the enchant user tests (which I only partly got working), they set an enchant data directory in the registry, which breaks the FW unit test the second and later times it is run, because it can't delete the temp dictionary.

Sorry this is so incomplete but it's as far as I got.

----------------------------------

The following are notes on building enchant (1.3?) and its dependencies using MSVC 2005 (by a former author, I think Eric Albright).
Some of the comments here may still be relevant for 1.6; I'm keeping the information because I don't understand it entirely.

Enchant depends on glib (http://www.gtk.org/)
Glib depends on libiconv (http://www.gnu.org/software/libiconv/) 
             and libintl (http://www.gnu.org/software/gettext/)

Glib passes file handles to clients. Libiconv takes a file pointer (in fprintf) from clients. Because
  these are CRT resources, it is very important that the version of the C runtime library be the same 
  for glib and any dlls that use it. See http://msdn2.microsoft.com/en-us/library/abx4dbyh(vs.80).aspx 
  and http://msdn2.microsoft.com/en-us/library/ms235460(VS.80).aspx for more information.
  
  If you see a Debug Assertion Failed (_osfile(fh) & FOPEN) this is because a file is opened using
  one runtime and read using another.

  Because libenchant does not expose any CRT boundaries, (no file handles, locales, or environment 
  variables passed to clients, and no CRT allocated pointers that will be free'd by clients, except
  when the free method is provided in the library) it can be linked with applications that do not 
  use the same CRT. The same is true of libenchant and the providers. Due to the fact that a 
  provider may also link to glib, we will explicitly name our glib with a new CRT so that others 
  can coexist.
  
This means you need to compile glib and libintl yourself instead of using Tor Lillqvist's prebuilt libraries
  (http://www.gimp.org/~tml/gimp/win32/downloads.html) since they use MSVCRT.DLL. (You can use
  the prebuilt ones for libiconv, but I've included instructions for that as well.)
  
For people concerned that the use of any runtime library other than MSVCRT.DLL would invalidate 
  the GPL see http://www.gnu.org/licenses/gpl-faq.html#WindowsRuntimeAndGPL
             
I successfully built using libiconv-1.9.1, gettext-0.14.5, and glib-2.14.2

libiconv and libintl are codependent so you need to follow the instructions in libiconv's README.woe32, 
in summary:

For release
  - build libiconv with "nmake -f Makefile.msvc NO_NLS=1 DLL=1 MFLAGS=-MD" 
      (I got errors: 6 unresolved externals like unresolved external symbol 
       __imp____libiconv_version referenced in function _print_version. But 
       those were errors with building iconv_no_i18n.exe which isn't required
       for the next steps so can safely be ignored.)
  - install libiconv with "nmake -f Makefile.msvc DLL=1 MFLAGS=-MD install"
      (This will produce a set of files in c:\usr.)
  - build libintl with "nmake -f Makefile.msvc DLL=1 MFLAGS=-MD"
  - install libintl with "nmake -f Makefile.msvc DLL=1 MFLAGS=-MD install"
  - build libiconv again with "nmake -f Makefile.msvc DLL=1 MFLAGS=-MD check" 
  - install libiconv again with "nmake -f Makefile.msvc DLL=1 MFLAGS=-MD install"

For debug:
  - build libiconv with "nmake -f Makefile.msvc NO_NLS=1 DLL=1 MFLAGS=-MDd PREFIX=c:\usr-debug" 
  - install libiconv with "nmake -f Makefile.msvc DLL=1 MFLAGS=-MDd PREFIX=c:\usr-debug install"
      (This will produce a set of files in c:\usr.)
  - build libintl with "nmake -f Makefile.msvc DLL=1 MFLAGS=-MDd PREFIX=c:\usr-debug"
  - install libintl with "nmake -f Makefile.msvc DLL=1 MFLAGS=-MDd PREFIX=c:\usr-debug install"
  - build libiconv again with "nmake -f Makefile.msvc DLL=1 MFLAGS=-MDd PREFIX=c:\usr-debug check" 
  - install libiconv again with "nmake -f Makefile.msvc DLL=1 MFLAGS=-MDd PREFIX=c:\usr-debug install"

add a manifest to iconv.dll and intl.dll
  mt iconv.dll.manifest -outputresource:iconv.dll

glib has a VC2005 solution (build\win32\vs8) that can be used to build it
  currently it has issues so we will do the bare minimum to build glib.dll and gmodule.dll
  copy libintl.h and iconv.h from c:\usr\include to glib-2.14.2\ (base directory)
  copy iconv.lib and intl.lib from c:\usr\lib to glib-2.14.2\build\win32\vs8\lib\release
  run the glib makefile in the glib directory to generate the glib.def file 
		  "nmake -f makefile.msc glib.def"
  build the pcre library from the makefile.msc (after removing the -DEBCDIC=0 line and adding -I . )
  add glib\gsequence.c, glib\gregex.c to the glib project
  add ..\..\..\glib\pcre to the libpath and add pcre.lib to the list of libraries
  with debug version, I was getting two copies of the runtime (debug and release) so had to 
    explicitly tell it to ignore the release version of the library (msvcrt.lib)
    
copy iconv.dll and intl.dll from c:\usr\bin to enchant\lib\glib\release
copy libglib-2.0-0-vs8.dll and libgmodule-2.0-0.dll to enchant\lib\glib\release
copy glib-2.0-vs8.lib and gmodule-2.0-vs8.lib to enchant\lib\glib\lib\release

do the same as above for debug


When distributing, be sure to include:
  msvcm80.dll
  msvcp80.dll
  msvcr80.dll
  Microsoft.VC80.CRT.manifest (these are included in vcredist_x86.exe and Microsoft_VC80_CRT_x86.msm)
  intl.dll
  iconv.dll
  libglib-2.0-0-vs8.dll
  libgmodule-2.0-0-vs8.dll
  libenchant.dll
    (any providers and their dependencies)
